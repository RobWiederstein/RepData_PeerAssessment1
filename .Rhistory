unzip(zipfile = zipfile)
a <- read.csv("activity.csv", stringsAsFactors = F)
a <- a[which(complete.cases(a) == TRUE), ]
library(plyr)
library(dplyr)
tot.steps.per.day <- ddply(a, .(date), summarize,
date = unique(date),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
tot.steps.per.day$sum
a <- a[which(complete.cases(a) == TRUE), ]
library(plyr)
library(dplyr)
tot.steps.per.day <- ddply(a, .(date), summarize,
date = unique(date),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
tot.steps.per.day$mean
a <- a[which(complete.cases(a) == TRUE), ]
library(plyr)
library(dplyr)
tot.steps.per.day <- ddply(a, .(date), summarize,
date = unique(date),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
round(tot.steps.per.day$mean, 2)
View(tot.steps.per.day)
View(a)
?tapply
View(tot.steps.per.day)
View(a)
tapply(a$steps, INDEX =  a$date, sum, na.rm = T)
tapply(a$steps, INDEX =  a$date, mean, na.rm = T)
a <- a[which(complete.cases(a) == T), ]
a[which(nchar(a$interval) == 3), 3] <- paste("0", a[which(nchar(a$interval) == 3), 3], sep = "")
a[which(nchar(a$interval) == 2), 3] <- paste("00", a[which(nchar(a$interval) == 2), 3], sep = "")
a[which(nchar(a$interval) == 1), 3] <- paste("000", a[which(nchar(a$interval) == 1), 3], sep = "")
a$steps <- as.integer(a$steps)
avg.steps.per.interval <- ddply(a, .(interval), summarize,
mean_steps = round(mean(steps, na.rm = T), 3),
time_interval = unique(interval)
)
avg.steps.per.interval$time_interval <- strptime(avg.steps.per.interval$time_interval, "%H%M")
avg.steps.per.interval$hm <- format(avg.steps.per.interval$time_interval, format = "%H:%M")
avg.steps.per.interval$hm <- as.POSIXct(avg.steps.per.interval$hm, format = "%H:%M")
library(scales)
p <- ggplot(avg.steps.per.interval, aes(hm, mean_steps))
p <- p + geom_line()
p <- p + xlab("time") + ylab("number") + ggtitle("Avg. Steps Per Time Interval \n (intervals in 5 min. increments)")
p <- p + scale_x_datetime(labels = date_format("%H%:%M"))
p
a <- a[which(complete.cases(a) == T), ]
a[which(nchar(a$interval) == 3), 3] <- paste("0", a[which(nchar(a$interval) == 3), 3], sep = "")
a[which(nchar(a$interval) == 2), 3] <- paste("00", a[which(nchar(a$interval) == 2), 3], sep = "")
a[which(nchar(a$interval) == 1), 3] <- paste("000", a[which(nchar(a$interval) == 1), 3], sep = "")
a$steps <- as.integer(a$steps)
avg.steps.per.interval <- ddply(a, .(interval), summarize,
mean_steps = round(mean(steps, na.rm = T), 3),
time_interval = unique(interval)
)
avg.steps.per.interval$time_interval <- strptime(avg.steps.per.interval$time_interval, "%H%M")
avg.steps.per.interval$hm <- format(avg.steps.per.interval$time_interval, format = "%H:%M")
avg.steps.per.interval$hm <- as.POSIXct(avg.steps.per.interval$hm, format = "%H:%M")
library(scales)
library(ggplot)
library(ggplot2)
p <- ggplot(avg.steps.per.interval, aes(hm, mean_steps))
p <- p + geom_line()
p <- p + xlab("time") + ylab("number") + ggtitle("Avg. Steps Per Time Interval \n (intervals in 5 min. increments)")
p <- p + scale_x_datetime(labels = date_format("%H%:%M"))
p
max.steps <- avg.steps.per.interval[which(avg.steps.per.interval$mean_steps == max(avg.steps.per.interval$mean_steps)), 4]
View(avg.steps.per.interval)
max.steps <- avg.steps.per.interval[which(avg.steps.per.interval$mean_steps == max(avg.steps.per.interval$mean_steps)), 4]
View(avg.steps.per.interval)
max(avg.steps.per.interval$mean_steps)
which(avg.steps.per.interval$mean_steps == max(avg.steps.per.interval$mean_steps))
avg.steps.per.interval[which(avg.steps.per.interval$mean_steps == max(avg.steps.per.interval$mean_steps)), 1]
time.interval <- avg.steps.per.interval[which(avg.steps.per.interval$mean_steps == max(avg.steps.per.interval$mean_steps)), 1]
b <- read.csv("activity.csv", stringsAsFactors = F)
missing.obs <- length(which(complete.cases(b) == F))
The number of observations that have missing or incomplete data are `r missing.obs`.
b <- read.csv("activity.csv", stringsAsFactors = F)
count.na <- function(x){
length(which(is.na(x) == T))
}
apply(b, MARGIN = 2, count.na)
sapply(b, MARGIN = 2, count.na)
?sapply
missing.na <- lapply(b, MARGIN = 2, count.na)
missing.na <- apply(b, MARGIN = 2, count.na)
complete <- b[which(complete.cases(b) == T), ]
complete.steps <- ddply(complete, .(interval), summarize,
date = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
complete.steps <- complete.steps[, c(1, 4)]
View(complete.steps)
impute <- merge(missing, complete.steps, by = c("interval"))
b <- read.csv("activity.csv", stringsAsFactors = F)
missing.obs <- length(which(complete.cases(b) == F))
b <- read.csv("activity.csv", stringsAsFactors = F)
count.na <- function(x){
length(which(is.na(x) == T))
}
missing.na <- apply(b, MARGIN = 2, count.na)
complete <- b[which(complete.cases(b) == T), ]
complete.steps <- ddply(complete, .(interval), summarize,
date = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
complete.steps <- complete.steps[, c(1, 4)]
missing <- complete.cases(b)
complete.cases(b)
missing <- b[which(complete.cases(b)==F), ]
View(missing)
impute <- merge(missing, complete.steps, by = c("interval"))
View(impute)
impute <- impute[order(impute$date), ]
View(impute)
impute$steps <- impute$mean
View(impute)
View(complete)
View(impute)
names(impute)
names(complete)
impute[, c("steps", "date", "interval")]
impute <- impute[, c("steps", "date", "interval")]
new.df <- rbind(complete, impute)
View(new.df)
complete <- b[which(complete.cases(b) == T), ]
complete.steps <- ddply(complete, .(interval), summarize,
date = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
complete.steps <- complete.steps[, c(1, 4)]
missing <- b[which(complete.cases(b)==F), ]
impute <- merge(missing, complete.steps, by = c("interval"))
impute <- impute[order(impute$date), ]
impute$steps <- impute$mean
impute <- impute[, c("steps", "date", "interval")]
new.df <- rbind(complete, impute)
```{r, echo=TRUE}
names(new.df)
p <- ggplot(new.df, aes(steps))
p <- p + geom_histogram()
p
imputed.steps <- ddply(new.df, .(interval), summarize,
date = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
p <- ggplot(imputed.steps, aes(steps))
p <- p + geom_histogram()
p
p <- ggplot(imputed.steps, aes(sum))
p <- p + geom_histogram()
p
p <- ggplot(imputed.steps, aes(sum))
p <- p + geom_histogram()
p <- p + ggtitle("Histogram Total Num. of Steps Each Day")
p
p <- ggplot(imputed.steps, aes(date, sum))
p <- geom_line()
p
p <- ggplot(imputed.steps, aes(date, sum))
p <- p + geom_line()
p
p <- ggplot(imputed.steps, aes(date, sum))
p <- p + geom_line(colour = "red")
p
p <- ggplot(imputed.steps, aes(date, sum))
p <- p + geom_line(colour = "red")
p <- p + geom_line(complete.steps, aes(date, sum))
p <- ggplot(imputed.steps, aes(date, sum))
p <- p + geom_line(colour = "red")
p <- p + geom_line(complete.steps, aes(complete.steps$date, complete.steps$sum))
p
p <- ggplot(imputed.steps, aes(date, sum))
p <- p + geom_line(colour = "red")
p <- p + geom_line(complete.steps)
p
p <- ggplot(imputed.steps, aes(date, sum))
p <- p + geom_line(colour = "red")
p <- p + geom_line(data = complete.steps)
p
p <- ggplot(imputed.steps, aes(date, sum))
p <- p + geom_line(colour = "red")
p <- p + geom_line(data = complete.steps)
p
file <- "activity.zip"
path <- getwd()
zipfile <- paste(path, file, sep = "/")
unzip(zipfile = zipfile)
a <- read.csv("activity.csv", stringsAsFactors = F)
tot.steps.per.day <- ddply(a, .(date), summarize,
library(plyr)
library(dplyr)
a <- a[which(complete.cases(a) == TRUE), ]
tot.steps.per.day <- ddply(a, .(date), summarize,
date = unique(date),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
library(ggplot2)
p <- ggplot(tot.steps.per.day, aes(sum))
p <- p + geom_histogram()
p <- p + ggtitle("Histogram of Total Steps by Day")
p
a <- a[which(complete.cases(a) == T), ]
a[which(nchar(a$interval) == 3), 3] <- paste("0", a[which(nchar(a$interval) == 3), 3], sep = "")
a[which(nchar(a$interval) == 2), 3] <- paste("00", a[which(nchar(a$interval) == 2), 3], sep = "")
a[which(nchar(a$interval) == 1), 3] <- paste("000", a[which(nchar(a$interval) == 1), 3], sep = "")
a$steps <- as.integer(a$steps)
avg.steps.per.interval <- ddply(a, .(interval), summarize,
mean_steps = round(mean(steps, na.rm = T), 3),
time_interval = unique(interval)
)
avg.steps.per.interval$time_interval <- strptime(avg.steps.per.interval$time_interval, "%H%M")
avg.steps.per.interval$hm <- format(avg.steps.per.interval$time_interval, format = "%H:%M")
avg.steps.per.interval$hm <- as.POSIXct(avg.steps.per.interval$hm, format = "%H:%M")
library(scales)
library(ggplot2)
p <- ggplot(avg.steps.per.interval, aes(hm, mean_steps))
p <- p + geom_line()
p <- p + xlab("time") + ylab("number") + ggtitle("Avg. Steps Per Time Interval \n (intervals in 5 min. increments)")
p <- p + scale_x_datetime(labels = date_format("%H%:%M"))
p
time.interval <- avg.steps.per.interval[which(avg.steps.per.interval$mean_steps == max(avg.steps.per.interval$mean_steps)), 1]
b <- read.csv("activity.csv", stringsAsFactors = F)
missing.obs <- length(which(complete.cases(b) == F))
b <- read.csv("activity.csv", stringsAsFactors = F)
count.na <- function(x){
length(which(is.na(x) == T))
}
missing.na <- apply(b, MARGIN = 2, count.na)
complete <- b[which(complete.cases(b) == T), ]
complete.steps <- ddply(complete, .(interval), summarize,
date = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
complete.steps <- complete.steps[, c(1, 4)]
missing <- b[which(complete.cases(b)==F), ]
impute <- merge(missing, complete.steps, by = c("interval"))
impute <- impute[order(impute$date), ]
impute$steps <- impute$mean
impute <- impute[, c("steps", "date", "interval")]
new.df <- rbind(complete, impute)
```
```{r, echo=TRUE}
imputed.steps <- ddply(new.df, .(interval), summarize,
date = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
p <- ggplot(imputed.steps, aes(sum))
p <- p + geom_histogram()
p <- p + ggtitle("Histogram Total Num. of Steps Each Day")
p
```
The mean steps from the imputed data set is `r imputed.steps$mean`.  The median steps from the imputed data set is `r imputed.steps$median`.
```{r, echo=TRUE}
p <- ggplot(imputed.steps, aes(date, sum))
p <- p + geom_line(colour = "red")
p <- p + geom_line(data = complete.steps)
p
head(imputed.steps)
head(complete.steps)
b <- read.csv("activity.csv", stringsAsFactors = F)
count.na <- function(x){
length(which(is.na(x) == T))
}
missing.na <- apply(b, MARGIN = 2, count.na)
```
All of the missing values in the data set are confined to the variable "steps."
```{r, echo=TRUE}
complete <- b[which(complete.cases(b) == T), ]
complete.steps <- ddply(complete, .(interval), summarize,
date = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
head(complete.steps)
head(imputed.steps)
missing <- b[which(complete.cases(b)==F), ]
impute <- merge(missing, complete.steps, by = c("interval"))
impute <- impute[order(impute$date), ]
head(impute)
impute <- impute[order(impute$date.x), ]
impute$steps <- impute$mean
impute <- impute[, c("steps", "date", "interval")]
impute <- impute[, c("steps", "date.x", "interval")]
head(impute)
names(impute)[2] <- "date"
new.df <- rbind(complete, impute)
imputed.steps <- ddply(new.df, .(interval), summarize,
date = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
p <- ggplot(imputed.steps, aes(sum))
p <- p + geom_histogram()
p <- p + ggtitle("Histogram Total Num. of Steps Each Day")
p
```
p <- ggplot(imputed.steps, aes(date, sum))
p <- p + geom_line(colour = "red")
p <- p + geom_line(data = complete.steps)
p
p <- p + ggtitle("Compare Total Steps in Imputed Dataset to Complete Cases Dataset")
p
head(new.df)
?weekdays
weekdays(new.df$date[1:50])
new.df$date[1:50]
as.Date(new.df$date[1:50])
weekdays(as.Date(new.df$date[1:50]))
weekdays(as.Date(new.df$date[1:50]), abbreviate)
weekdays(as.Date(new.df$date[1:50]), abbreviate = T)
new.df$weekdays(as.Date(new.df$date), abbreviate = T)
new.df$weekdays <- as.Date(new.df$date), abbreviate = T)
new.df$weekdays <- weekdays(as.Date(new.df$date), abbreviate = T)
head(new.df, 50)
names(df)
names(new.df)
str(new.df)
table(new.df$weekdays)
weekdays <- c("Mon", "Tue", "Wed", "Thu", "Fri")
which(new.df$weekdays %in% weekdays)
new.df$weekdays[which(new.df$weekdays %in% weekdays)] <- "weekdays"
head(new.df, 50)
new.df$weekdays <- weekdays(as.Date(new.df$date), abbreviate = T)
weekdays <- c("Mon", "Tue", "Wed", "Thu", "Fri")
weekend <- c("Sat", "Sun")
new.df$weekdays[which(new.df$weekdays %in% weekdays)] <- "weekdays"
new.df$weekedays[which(new.df$weekdays %in% weekend)] <- "weekend"
table(new.df$weekdays)
new.df$weekdays[which(new.df$weekdays %in% weekend)] <- "weekend"
table(new.df$weekdays)
new.df$weekdays <- weekdays(as.Date(new.df$date), abbreviate = T)
weekdays <- c("Mon", "Tue", "Wed", "Thu", "Fri")
weekend <- c("Sat", "Sun")
new.df$weekdays[which(new.df$weekdays %in% weekdays)] <- "weekday"
new.df$weekdays[which(new.df$weekdays %in% weekend)] <- "weekend"
table(new.df$weekdays)
new.df$weekday <- as.Factor(newdf$weekday)
new.df$weekday <- as.factor(newdf$weekday)
new.df$weekday <- as.factor(new.df$weekday)
str(new.df)
new.df <- ddply(new.df, .(interval), summarize,
date = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
complete <- b[which(complete.cases(b) == T), ]
complete.steps <- ddply(complete, .(interval), summarize,
date = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
#complete.steps <- complete.steps[, c(1, 4)]
missing <- b[which(complete.cases(b)==F), ]
impute <- merge(missing, complete.steps, by = c("interval"))
impute <- impute[order(impute$date.x), ]
impute$steps <- impute$mean
impute <- impute[, c("steps", "date.x", "interval")]
names(impute)[2] <- "date"
new.df <- rbind(complete, impute)
```
```{r, echo=TRUE}
new.df$weekdays <- weekdays(as.Date(new.df$date), abbreviate = T)
weekdays <- c("Mon", "Tue", "Wed", "Thu", "Fri")
weekend <- c("Sat", "Sun")
new.df$weekdays[which(new.df$weekdays %in% weekdays)] <- "weekday"
new.df$weekdays[which(new.df$weekdays %in% weekend)] <- "weekend"
new.df$weekday <- as.factor(new.df$weekday)
new.df1 <- ddply(new.df, .(interval, weekday), summarize,
date = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
View(new.df1)
p <- ggplot(new.df1, aes(date, steps))
p <- p + geom_line()
p
p
p <- ggplot(new.df1, aes(date, sum))
p <- p + geom_line()
p
head(new.df1)
p <- ggplot(new.df1, aes(date, sum, group = weekday))
p <- p + geom_line()
p
new.df1 <- ddply(new.df, .(interval, weekday), summarize,
interval = interval,
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
new.df1 <- ddply(new.df, .(interval, weekday), summarize,
interval = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
head(new.df)
head(new.df1)
p <- ggplot(new.df1, aes(date, sum, group = weekday))
p <- p + geom_line()
p
new.df1 <- ddply(new.df, .(interval, weekday), summarize,
interval = unique(date),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
new.df1 <- ddply(new.df, .(interval, weekday), summarize,
interval = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
View(new.df1)
p <- ggplot(new.df1, aes(date, sum, group = weekday))
p <- p + geom_line()
p
head(new.df1)
p <- ggplot(new.df1, aes(interval, sum, group = weekday))
p <- p + geom_line()
p
p <- ggplot(new.df1, aes(interval, sum))
p <- p + geom_line()
p
p <- p + facet_grid(~.weekdays)
p <- ggplot(new.df1, aes(interval, sum))
p <- p + geom_line()
p <- p + facet_grid(~.weekdays)
p
p <- ggplot(new.df1, aes(interval, sum))
p <- p + geom_line()
p <- p + facet_grid(. ~ weekdays)
p
head(new.df1)
p <- ggplot(new.df1, aes(interval, sum))
p <- p + geom_line()
p <- p + facet_grid(. ~ weekday)
p
p <- ggplot(new.df1, aes(interval, sum))
p <- p + geom_line()
p <- p + facet_grid(weekday ~ .)
p
p <- ggplot(new.df1, aes(interval, sum))
p <- p + geom_line()
p <- p + facet_grid(weekday ~ .)
p <- p + ggtitle("Average Number of Steps Taken")
p
p <- ggplot(new.df1, aes(interval, sum))
p <- p + geom_line()
p <- p + facet_grid(weekday ~ .)
p <- p + ggtitle("Average Number of Steps Taken \n Weekend vs. Weekday")
p
new.df$weekdays <- weekdays(as.Date(new.df$date), abbreviate = T)
weekdays <- c("Mon", "Tue", "Wed", "Thu", "Fri")
weekend <- c("Sat", "Sun")
new.df$weekdays[which(new.df$weekdays %in% weekdays)] <- "weekday"
new.df$weekdays[which(new.df$weekdays %in% weekend)] <- "weekend"
new.df$weekday <- as.factor(new.df$weekday)
new.df1 <- ddply(new.df, .(interval, weekday), summarize,
interval = unique(interval),
sum = sum(steps, na.rm = T),
mean = mean(steps, na.rm = T),
median = median(steps, na.rm = T)
)
p <- ggplot(new.df1, aes(interval, sum))
p <- p + geom_line()
p <- p + facet_grid(weekday ~ .)
p <- p + ggtitle("Average Number of Steps Taken \n Weekend vs. Weekday")
p
p <- ggplot(new.df1, aes(interval, sum))
p <- p + geom_line()
p <- p + facet_grid(weekday ~ .)
p <- p + ggtitle("Average Number of Steps Taken \n Weekend vs. Weekday")
p <- p + xlab("Number of Steps")
p
p <- ggplot(new.df1, aes(interval, sum))
p <- p + geom_line()
p <- p + facet_grid(weekday ~ .)
p <- p + ggtitle("Average Number of Steps Taken \n Weekend vs. Weekday")
p <- p + ylab("Number of Steps")
p
